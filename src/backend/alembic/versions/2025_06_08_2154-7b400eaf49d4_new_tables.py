"""New tables

Revision ID: 7b400eaf49d4
Revises: 67e9ec5d837c
Create Date: 2025-06-08 21:54:39.244604

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "7b400eaf49d4"
down_revision: Union[str, None] = "67e9ec5d837c"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "modules",
        sa.Column("title", sa.String(length=127), nullable=False),
        sa.Column("description", sa.String(length=255), nullable=False),
        sa.Column("is_contest", sa.Boolean(), nullable=False),
        sa.Column("admin_id", sa.Integer(), nullable=False),
        sa.Column("group_id", sa.Integer(), nullable=False),
        sa.Column("tasks_count", sa.Integer(), nullable=False),
        sa.Column(
            "start_datetime",
            sa.DateTime(timezone=True),
            server_default=sa.text("timezone('UTC', now())"),
            nullable=False,
        ),
        sa.Column(
            "end_datetime",
            sa.DateTime(timezone=True),
            server_default=sa.text("timezone('UTC', now())"),
            nullable=False,
        ),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["admin_id"],
            ["user_profiles.user_id"],
            name=op.f("fk_modules_admin_id_user_profiles"),
        ),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["groups.id"],
            name=op.f("fk_modules_group_id_groups"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_modules")),
    )
    op.create_index(op.f("ix_modules_id"), "modules", ["id"], unique=False)
    op.create_table(
        "user_replies",
        sa.Column("account_id", sa.Integer(), nullable=False),
        sa.Column("task_id", sa.Integer(), nullable=False),
        sa.Column("user_answer", sa.String(length=255), nullable=False),
        sa.Column("is_correct", sa.Boolean(), nullable=False),
        sa.Column("user_attempts", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["accounts.id"],
            name=op.f("fk_user_replies_account_id_accounts"),
        ),
        sa.ForeignKeyConstraint(
            ["task_id"],
            ["tasks.id"],
            name=op.f("fk_user_replies_task_id_tasks"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user_replies")),
    )
    op.create_index(op.f("ix_user_replies_id"), "user_replies", ["id"], unique=False)

    op.drop_constraint(
        op.f("fk_tasks_assignment_id_assignments"), "tasks", type_="foreignkey"
    )
    op.drop_column("tasks", "assignment_id")

    op.drop_index(op.f("ix_user_replys_id"), table_name="user_replys")
    op.drop_table("user_replys")
    op.drop_index(op.f("ix_assignments_id"), table_name="assignments")
    op.drop_table("assignments")

    op.add_column("tasks", sa.Column("module_id", sa.Integer(), nullable=False))

    op.create_foreign_key(
        op.f("fk_tasks_module_id_modules"),
        "tasks",
        "modules",
        ["module_id"],
        ["id"],
    )

    op.alter_column(
        "group_invites",
        "code",
        existing_type=sa.VARCHAR(length=6),
        type_=sa.String(length=8),
        existing_nullable=False,
    )

    op.alter_column(
        "user_profiles",
        "patronymic",
        existing_type=sa.VARCHAR(length=63),
        type_=sa.String(length=31),
        existing_nullable=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "user_profiles",
        "patronymic",
        existing_type=sa.String(length=31),
        type_=sa.VARCHAR(length=63),
        existing_nullable=False,
    )
    op.add_column(
        "tasks",
        sa.Column("assignment_id", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(op.f("fk_tasks_module_id_modules"), "tasks", type_="foreignkey")
    op.create_foreign_key(
        op.f("fk_tasks_assignment_id_assignments"),
        "tasks",
        "assignments",
        ["assignment_id"],
        ["id"],
    )
    op.drop_column("tasks", "module_id")
    op.alter_column(
        "group_invites",
        "code",
        existing_type=sa.String(length=8),
        type_=sa.VARCHAR(length=6),
        existing_nullable=False,
    )
    op.create_table(
        "assignments",
        sa.Column(
            "title",
            sa.VARCHAR(length=127),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "description",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("is_contest", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("admin_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("group_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('assignments_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "tasks_count",
            sa.INTEGER(),
            server_default=sa.text("0"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "start_datetime",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "end_datetime",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "is_active",
            sa.BOOLEAN(),
            server_default=sa.text("false"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["admin_id"],
            ["user_profiles.user_id"],
            name="fk_assignments_admin_id_user_profiles",
        ),
        sa.ForeignKeyConstraint(
            ["group_id"], ["groups.id"], name="fk_assignments_group_id_groups"
        ),
        sa.PrimaryKeyConstraint("id", name="pk_assignments"),
        postgresql_ignore_search_path=False,
    )
    op.create_index(op.f("ix_assignments_id"), "assignments", ["id"], unique=False)
    op.create_table(
        "user_replys",
        sa.Column("account_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("task_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "user_answer",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("is_correct", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "user_attempts",
            sa.INTEGER(),
            server_default=sa.text("0"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["accounts.id"],
            name=op.f("fk_user_replys_account_id_accounts"),
        ),
        sa.ForeignKeyConstraint(
            ["task_id"],
            ["tasks.id"],
            name=op.f("fk_user_replys_task_id_tasks"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user_replys")),
    )
    op.create_index(op.f("ix_user_replys_id"), "user_replys", ["id"], unique=False)
    op.drop_index(op.f("ix_user_replies_id"), table_name="user_replies")
    op.drop_table("user_replies")
    op.drop_index(op.f("ix_modules_id"), table_name="modules")
    op.drop_table("modules")
    # ### end Alembic commands ###
