"""Update account tables

Revision ID: 45fde44bc98b
Revises: d770849c18e4
Create Date: 2025-04-12 01:18:06.869280

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "45fde44bc98b"
down_revision: Union[str, None] = "d770849c18e4"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("account_group_association_table")
    op.add_column(
        "accounts", sa.Column("group_id", sa.Integer(), nullable=False)
    )
    op.create_foreign_key(
        op.f("fk_accounts_group_id_groups"),
        "accounts",
        "groups",
        ["group_id"],
        ["id"],
    )
    op.add_column(
        "assignments", sa.Column("admin_id", sa.Integer(), nullable=False)
    )
    op.drop_constraint(
        "fk_assignments_admin_account_id_accounts",
        "assignments",
        type_="foreignkey",
    )
    op.create_foreign_key(
        op.f("fk_assignments_admin_id_user_profiles"),
        "assignments",
        "user_profiles",
        ["admin_id"],
        ["user_id"],
    )
    op.drop_column("assignments", "admin_account_id")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "assignments",
        sa.Column(
            "admin_account_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.drop_constraint(
        op.f("fk_assignments_admin_id_user_profiles"),
        "assignments",
        type_="foreignkey",
    )
    op.create_foreign_key(
        "fk_assignments_admin_account_id_accounts",
        "assignments",
        "accounts",
        ["admin_account_id"],
        ["id"],
    )
    op.drop_column("assignments", "admin_id")
    op.drop_constraint(
        op.f("fk_accounts_group_id_groups"), "accounts", type_="foreignkey"
    )
    op.drop_column("accounts", "group_id")
    op.create_table(
        "account_group_association_table",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "account_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "group_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["accounts.id"],
            name="fk_account_group_association_table_account_id_accounts",
        ),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["groups.id"],
            name="fk_account_group_association_table_group_id_groups",
        ),
        sa.PrimaryKeyConstraint(
            "id", name="pk_account_group_association_table"
        ),
        sa.UniqueConstraint(
            "account_id", "group_id", name="idx_account_group"
        ),
    )
    # ### end Alembic commands ###
